const contractAddress = 'YOUR_CONTRACT_ADDRESS';
const contractABI = [
    // Paste the ABI generated by the Solidity compiler here
];

window.addEventListener('load', async () => {
    if (window.ethereum) {
        window.web3 = new Web3(ethereum);
        try {
            await ethereum.enable();
            initContract();
        } catch (error) {
            console.error("User denied account access");
        }
    } else if (window.web3) {
        window.web3 = new Web3(web3.currentProvider);
        initContract();
    } else {
        console.log('Non-Ethereum browser detected. You should consider trying MetaMask!');
    }
});

let referendumContract;
let accounts;

async function initContract() {
    accounts = await web3.eth.getAccounts();
    referendumContract = new web3.eth.Contract(contractABI, contractAddress);
    loadProposals();
}

async function loadProposals() {
    const proposalList = document.getElementById('proposalList');
    proposalList.innerHTML = '';

    const proposalCount = await referendumContract.methods.proposals().call();
    for (let i = 0; i < proposalCount.length; i++) {
        const proposal = await referendumContract.methods.proposals(i).call();
        const listItem = document.createElement('li');
        listItem.textContent = `${i}: ${proposal.description} (Votes: ${proposal.voteCount})`;
        proposalList.appendChild(listItem);
    }
}

async function vote() {
    const proposalIndex = document.getElementById('proposalIndex').value;
    await referendumContract.methods.vote(proposalIndex).send({ from: accounts[0] });
    loadProposals();
}

async function getWinner() {
    const winnerName = await referendumContract.methods.winnerName().call();
    document.getElementById('winnerName').textContent = `Winning Proposal: ${winnerName}`;
}
